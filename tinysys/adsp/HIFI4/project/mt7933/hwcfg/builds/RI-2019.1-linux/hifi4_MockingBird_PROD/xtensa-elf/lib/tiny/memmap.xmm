//  Memory map file to generate linker scripts for programs with tiny runtime.

// Customer ID=14794; Build=0x87a3c; Copyright (c) 2004-2015 Cadence Design Systems, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

//  Show more details if configuration targets Tensilica-supported FPGA boards:
INCLUDE_XTBOARD_MEMORIES = try


// A memory map is a sequence of memory descriptions and
// optional parameter assignments.
//
// Each memory description has the following format:
//   BEGIN <name>
//     <addr> [,<paddr>] : <mem-type> : <mem-name> : <size> [,<psize>]
//                       : [writable] [,executable] [,device] ;
//     <segment>*
//   END <name>
//
// where each <segment> description has the following format:
//     <seg-name> : F|C : <start-addr> - <end-addr> [ : STACK ] [ : HEAP ]
//                : <section-name>* ;
//
// Each parameter assignment is a keyword/value pair in the following format:
//   <keyword> = <value>                (no spaces in <value>)
// or
//   <keyword> = "<value>"              (spaces allowed in <value>)
//
// The following primitives are also defined:
//   PLACE SECTIONS( <section-name>* ) { WITH_SECTION(<section-name>)
//                                       | IN_SEGMENT(<seg-name>) }
//
//   NOLOAD <section-name1> [ <section-name2> ... ]
//
// Please refer to the Xtensa LSP Reference Manual for more details.
//
BEGIN iocached
0x70000000: io : iocached : 0xda00000 : executable, writable ;
END iocached

BEGIN rambypass
0x80000000: sysram : rambypass : 0x10000000 : device, executable, writable ;
END rambypass

BEGIN iobypass
0x90000000: io : iobypass : 0xda00000 : device, executable, writable ;
END iobypass

BEGIN sram
0xa0000000: sysram : sram : 0x10000000 : executable, writable ;
 sram0 : C : 0xa0000000 - 0xa00003ff : ;
 sram1 : F : 0xa0000400 - 0xa000057b : .WindowVectors.text .Level2InterruptVector.literal;
 sram2 : F : 0xa000057c - 0xa000059b : .Level2InterruptVector.text .Level3InterruptVector.literal;
 sram3 : F : 0xa000059c - 0xa00005bb : .Level3InterruptVector.text .DebugExceptionVector.literal;
 sram4 : F : 0xa00005bc - 0xa00005db : .DebugExceptionVector.text .KernelExceptionVector.literal;
 sram5 : F : 0xa00005dc - 0xa00005fb : .KernelExceptionVector.text .UserExceptionVector.literal;
 sram6 : F : 0xa00005fc - 0xa000061b : .UserExceptionVector.text .DoubleExceptionVector.literal;
 sram7 : F : 0xa000061c - 0xa000063f : .DoubleExceptionVector.text .ResetVector.literal;
 sram8 : F : 0xa0000640 - 0xafffffff :  STACK :  HEAP : .ResetVector.text .ResetHandler.literal .ResetHandler.text .sram.rodata .clib.rodata .rtos.rodata .rodata .sram.literal .literal .rtos.literal .clib.literal .sram.text .text .clib.text .rtos.text .clib.data .clib.percpu.data .rtos.percpu.data .rtos.data .sram.data .data __llvm_prf_names .clib.bss .clib.percpu.bss .rtos.percpu.bss .rtos.bss .sram.bss .bss;
END sram

